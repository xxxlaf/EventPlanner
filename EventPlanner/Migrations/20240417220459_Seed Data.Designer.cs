// <auto-generated />
using System;
using EventPlanner.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventPlanner.Migrations
{
    [DbContext(typeof(EventPlannerDbContext))]
    [Migration("20240417220459_Seed Data")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventPlanner.Models.Attendee", b =>
                {
                    b.Property<int>("AttendeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendeeId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttendeeId");

                    b.HasIndex("EventId");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            AttendeeId = 1,
                            Email = "attendee1@example.com",
                            EventId = 1,
                            Name = "Attendee 1",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            AttendeeId = 2,
                            Email = "attendee2@example.com",
                            EventId = 1,
                            Name = "Attendee 2",
                            Phone = "123-456-7891"
                        },
                        new
                        {
                            AttendeeId = 3,
                            Email = "attendee3@example.com",
                            EventId = 1,
                            Name = "Attendee 3",
                            Phone = "123-456-7892"
                        },
                        new
                        {
                            AttendeeId = 4,
                            Email = "attendee4@example.com",
                            EventId = 1,
                            Name = "Attendee 4",
                            Phone = "123-456-7893"
                        },
                        new
                        {
                            AttendeeId = 5,
                            Email = "attendee5@example.com",
                            EventId = 1,
                            Name = "Attendee 5",
                            Phone = "123-456-7894"
                        },
                        new
                        {
                            AttendeeId = 6,
                            Email = "attendee6@example.com",
                            EventId = 2,
                            Name = "Attendee 6",
                            Phone = "123-456-7895"
                        },
                        new
                        {
                            AttendeeId = 7,
                            Email = "attendee7@example.com",
                            EventId = 2,
                            Name = "Attendee 7",
                            Phone = "123-456-7896"
                        },
                        new
                        {
                            AttendeeId = 8,
                            Email = "attendee8@example.com",
                            EventId = 2,
                            Name = "Attendee 8",
                            Phone = "123-456-7897"
                        },
                        new
                        {
                            AttendeeId = 9,
                            Email = "attendee9@example.com",
                            EventId = 2,
                            Name = "Attendee 9",
                            Phone = "123-456-7898"
                        },
                        new
                        {
                            AttendeeId = 10,
                            Email = "attendee10@example.com",
                            EventId = 2,
                            Name = "Attendee 10",
                            Phone = "123-456-7899"
                        });
                });

            modelBuilder.Entity("EventPlanner.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            EventDate = new DateOnly(2024, 4, 22),
                            EventName = "Pizza Party",
                            OrganizerId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            EventId = 2,
                            EventDate = new DateOnly(2024, 4, 26),
                            EventName = "John Summit Live",
                            OrganizerId = 2,
                            VenueId = 2
                        });
                });

            modelBuilder.Entity("EventPlanner.Models.Organizer", b =>
                {
                    b.Property<int>("OrganizerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizerId"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizerId");

                    b.ToTable("Organizers");

                    b.HasData(
                        new
                        {
                            OrganizerId = 1,
                            CompanyName = "Cincinnati Insurance",
                            ContactInfo = "dude.name@cincinnatiinsurance.com",
                            OrganizerName = "A Dude's Name"
                        },
                        new
                        {
                            OrganizerId = 2,
                            CompanyName = "Bogart's",
                            ContactInfo = "josh.bell@bogarts.com",
                            OrganizerName = "Josh Bell"
                        });
                });

            modelBuilder.Entity("EventPlanner.Models.TaskItem", b =>
                {
                    b.Property<int>("TaskItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskItemId"));

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("TaskItemId");

                    b.HasIndex("EventId");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            TaskItemId = 1,
                            Deadline = new DateOnly(2024, 4, 21),
                            Description = "Book Venue",
                            EventId = 1,
                            Status = false
                        },
                        new
                        {
                            TaskItemId = 2,
                            Deadline = new DateOnly(2024, 4, 21),
                            Description = "Send Invitations",
                            EventId = 1,
                            Status = false
                        },
                        new
                        {
                            TaskItemId = 3,
                            Deadline = new DateOnly(2024, 4, 26),
                            Description = "Sound Check w/ John Summit",
                            EventId = 2,
                            Status = false
                        },
                        new
                        {
                            TaskItemId = 4,
                            Deadline = new DateOnly(2024, 4, 26),
                            Description = "Clean General Floor",
                            EventId = 2,
                            Status = false
                        });
                });

            modelBuilder.Entity("EventPlanner.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalCost")
                        .HasColumnType("int");

                    b.Property<string>("VenueName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            VenueId = 1,
                            Capacity = 500,
                            Location = "317 E 5th St, Cincinnati, OH 45202",
                            RentalCost = 250,
                            VenueName = "Cincinnati Masonic Center"
                        },
                        new
                        {
                            VenueId = 2,
                            Capacity = 1500,
                            Location = "2621 Short Vine St, Cincinnati, OH 45219",
                            RentalCost = 1000,
                            VenueName = "Bogart's Music Venue"
                        });
                });

            modelBuilder.Entity("EventPlanner.Models.Attendee", b =>
                {
                    b.HasOne("EventPlanner.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPlanner.Models.Event", b =>
                {
                    b.HasOne("EventPlanner.Models.Organizer", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPlanner.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("EventPlanner.Models.TaskItem", b =>
                {
                    b.HasOne("EventPlanner.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });
#pragma warning restore 612, 618
        }
    }
}
