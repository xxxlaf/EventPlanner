@page "/"
@using EventPlanner.Models
@inject HttpClient httpClient
@inject NavigationManager navigation

<h1>Event Planner</h1>

@if (events.Count > 0)
{
    <table>
        <thead>
            <tr>
                <th>Event Name</th>
                <th>Event Date</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var @eventObj in events)
            {
                <tr>
                    <td>@eventObj.EventName</td>
                    <td>@eventObj.EventDate</td>
                    <td><FluentButton @onclick="@(() => UpdateEvent(@eventObj))">Update</FluentButton></td>
                    <td><FluentButton @onclick="@(() => ManageTaskItems(@eventObj))">Manage Task Items</FluentButton></td>
                    <td><FluentButton @onclick="@(() => DeleteEvent(@eventObj))">Delete Event</FluentButton></td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No events found!</p>
}

@code {
    private List<Event> events = new List<Event>();

    [SupplyParameterFromForm]
    private Event selectedEvent { get; set; } = new Event();

    protected override async Task OnInitializedAsync()
    {
        events = await httpClient.GetFromJsonAsync<List<Event>>("api/Event");
    }

    private void UpdateEvent(Event @event)
    {
        selectedEvent = @event;
        navigation.NavigateTo($"/update/{@event.EventId}");
    }

    private void ManageTaskItems(Event @event)
    {
        selectedEvent = @event;
        navigation.NavigateTo($"/managetaskitems/{@event.EventId}");
    }

    private void DeleteEvent(Event @event)
    {
        selectedEvent = @event;
        navigation.NavigateTo($"/deleteevent/{@event.EventId}");
    }
}

