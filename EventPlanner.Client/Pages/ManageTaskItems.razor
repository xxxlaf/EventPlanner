@page "/managetaskitems/{EventId:int}"
@inject NavigationManager navigation
@inject HttpClient httpClient

<h1>Manage @selectedEvent.EventName Task Items</h1>

@if (taskItems != null && taskItems.Count > 0)
{
    <table>
        <thead>
            <tr>
                <th>Description</th>
                <th>Deadline</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var taskItem in taskItems)
            {
                <tr>
                    <td>@taskItem.Description</td>
                    <td>@taskItem.Deadline.ToString("MM/dd/yyyy")</td>
                    <td>
                        <input type="checkbox" @bind="taskItem.Status" @onclick="() => UpdateTaskStatus(taskItem)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No tasks found for this event.</p>
}

<h2>Create New Task Item</h2>
<form @onsubmit="CreateTaskItem">
    <label>Description:</label>
    <input type="text" @bind="newTaskItem.Description" required />
    <label>Deadline:</label>
    <input type="date" @bind="newTaskItem.Deadline" required />
    <button type="submit">Create</button>
</form>

@code {
    [SupplyParameterFromForm]
    private Event selectedEvent { get; set; } = new Event();
    private List<TaskItem> taskItems = new List<TaskItem>();
    private TaskItem newTaskItem = new TaskItem();

    [Parameter]
    public int EventId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadSelectedEvent();
        await LoadTaskItems();
    }

    private async Task LoadSelectedEvent()
    {
        selectedEvent = await httpClient.GetFromJsonAsync<Event>($"api/Event/{EventId}");
    }

    private async Task LoadTaskItems()
    {
        taskItems = await httpClient.GetFromJsonAsync<List<TaskItem>>($"/api/Event/{EventId}/TaskItems");
    }

    private async Task UpdateTaskStatus(TaskItem taskItem)
    {
        var response = await httpClient.PutAsJsonAsync($"/api/TaskItem/{taskItem.TaskItemId}", taskItem);
    }

    private async Task CreateTaskItem()
    {
        newTaskItem.EventId = EventId;
        var response = await httpClient.PostAsJsonAsync("/api/TaskItem", newTaskItem);
        if (response.IsSuccessStatusCode)
        {
            newTaskItem = new TaskItem();
            await LoadTaskItems();
        }
    }
}