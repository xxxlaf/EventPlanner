@page "/manageattendees/{EventId:int}"
@inject NavigationManager navigation
@inject HttpClient httpClient

<h1>Manage @selectedEvent.EventName Attendees</h1>

@if (attendees != null && attendees.Count > 0)
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var attendee in attendees)
            {
                <tr>
                    <td>@attendee.Name</td>
                    <td>@attendee.Email</td>
                    <td>@attendee.Phone</td>
                    <td><FluentButton @onclick="@(() => DeleteAttendee(attendee))">Delete</FluentButton></td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No attendees found for this event.</p>
}

<h2>Create New Attendee</h2>
<form @onsubmit="CreateAttendee">
    <label>Name:</label>
    <input type="text" @bind="newAttendee.Name" required />
    <label>Email:</label>
    <input type="text" @bind="newAttendee.Email" required />
    <label>Phone:</label>
    <input type="text" @bind="newAttendee.Phone" required />
    <button type="submit">Create</button>
</form>

@code {
    [SupplyParameterFromForm]
    private Event selectedEvent { get; set; } = new Event();
    private List<Attendee> attendees = new List<Attendee>();
    private Attendee newAttendee = new Attendee();

    [Parameter]
    public int EventId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadSelectedEvent();
        await LoadAttendees();
    }

    private async Task LoadSelectedEvent()
    {
        selectedEvent = await httpClient.GetFromJsonAsync<Event>($"api/Event/{EventId}");
    }

    private async Task LoadAttendees()
    {
        attendees = await httpClient.GetFromJsonAsync<List<Attendee>>($"/api/Event/{EventId}/Attendees");
    }

    private async Task CreateAttendee()
    {
        newAttendee.EventId = EventId;
        var response = await httpClient.PostAsJsonAsync("/api/Attendee", newAttendee);
        if (response.IsSuccessStatusCode)
        {
            newAttendee = new Attendee();
            await LoadAttendees();
        }
    }

    private async Task DeleteAttendee(Attendee attendee)
    {
        var response = await httpClient.DeleteAsync($"/api/Attendee/{attendee.AttendeeId}");
        if (response.IsSuccessStatusCode)
        {
            await LoadAttendees();
        }
    }
}
